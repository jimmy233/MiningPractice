int matrix[101][101][101];
int countsum;
void cal(int rank, int VAR__NUM)
{
   if ( rank != 1 )
   {
      int rowmin[rank];
      int columnmin[rank];
      for ( int VAR__53647 = 0; VAR__53647 <= ( rank - 1 ); ++VAR__53647 )
      {
         for ( int VAR__21230 = 0; VAR__21230 <= ( rank - 1 ); ++VAR__21230 )
         {
            if ( VAR__21230 == 0 )
            {
               rowmin[VAR__53647] = matrix[VAR__NUM][VAR__53647][VAR__21230];
            }
            else
            {
               rowmin[VAR__53647] = VAR__MIN(rowmin[VAR__53647], matrix[VAR__NUM][VAR__53647][VAR__21230]);
            }
         }

         if ( rowmin[VAR__53647] != 0 )
         {
            for ( int VAR__21230 = 0; VAR__21230 <= ( rank - 1 ); ++VAR__21230 )
            {
               matrix[VAR__NUM][VAR__53647][VAR__21230] = matrix[VAR__NUM][VAR__53647][VAR__21230] - rowmin[VAR__53647];
            }
         }
      }

      for ( int VAR__53647 = 0; VAR__53647 <= ( rank - 1 ); ++VAR__53647 )
      {
         for ( int VAR__21230 = 0; VAR__21230 <= ( rank - 1 ); ++VAR__21230 )
         {
            if ( VAR__21230 == 0 )
            {
               columnmin[VAR__53647] = matrix[VAR__NUM][VAR__21230][VAR__53647];
            }
            else
            {
               columnmin[VAR__53647] = VAR__MIN(columnmin[VAR__53647], matrix[VAR__NUM][VAR__21230][VAR__53647]);
            }
         }

         if ( columnmin[VAR__53647] != 0 )
         {
            for ( int VAR__21230 = 0; VAR__21230 <= ( rank - 1 ); ++VAR__21230 )
            {
               matrix[VAR__NUM][VAR__21230][VAR__53647] = matrix[VAR__NUM][VAR__21230][VAR__53647] - columnmin[VAR__53647];
            }
         }
      }

      countsum += matrix[VAR__NUM][1][1];
      for ( int VAR__53647 = 2; VAR__53647 <= ( rank - 1 ); ++VAR__53647 )
      {
         for ( int VAR__21230 = 0; VAR__21230 <= ( rank - 1 ); ++VAR__21230 )
         {
            matrix[VAR__NUM][VAR__21230][VAR__53647 - 1] = matrix[VAR__NUM][VAR__21230][VAR__53647];
         }
      }


      for ( int VAR__53647 = 2; VAR__53647 <= ( rank - 1 ); ++VAR__53647 )
      {
         for ( int VAR__21230 = 0; VAR__21230 <= ( rank - 1 ); ++VAR__21230 )
         {
            matrix[VAR__NUM][VAR__53647 - 1][VAR__21230] = matrix[VAR__NUM][VAR__53647][VAR__21230];
         }
      }


      cal(rank - 1, VAR__NUM);
   }
}


int main()
{
   int VAR_1238123;

   cin >> VAR_1238123;
   for ( int VAR__53647 = 0; VAR__53647 <= ( VAR_1238123 - 1 ); ++VAR__53647 )
   {
      for ( int VAR__21230 = 0; VAR__21230 <= ( VAR_1238123 - 1 ); ++VAR__21230 )
      {
         for ( int VAR__8444594 = 0; VAR__8444594 <= ( VAR_1238123 - 1 ); ++VAR__8444594 )
         {
            cin >> matrix[VAR__53647][VAR__21230][VAR__8444594];
         }
      }
   }



   for ( int VAR__53647 = 0; VAR__53647 <= ( VAR_1238123 - 1 ); ++VAR__53647 )
   {
      countsum = 0;
      cal(VAR_1238123, VAR__53647);
      ( cout << countsum ) << endl;
   }

   return 0;
}
