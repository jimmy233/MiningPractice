int DORM[MAXN][MAXN];
int N;
int SIGN[MAXN][MAXN];
void aff(int VAR__7685, int VAR__3918907);

int main()
{
   memset(DORM, 0, sizeof( DORM ));
   memset(SIGN, 0, sizeof( SIGN ));
   int M;
   int VAR__SUM = 0;
   cin >> N;
   for ( int VAR__53647 = 0; VAR__53647 < N; VAR__53647++ )
   {
      cin.get();
      for ( int VAR__21230 = 0; VAR__21230 < N; VAR__21230++ )
      {
         char VAR__1238129;
         cin.get(VAR__1238129);
         switch ( VAR__1238129 )
         {
         case '.':
            DORM[VAR__53647][VAR__21230] = -1;
            break;

         case '#':
            DORM[VAR__53647][VAR__21230] = 0;
            break;

         case '@':
            DORM[VAR__53647][VAR__21230] = 1;
            break;
         }
      }
   }

   cin >> M;
   for ( int VAR__1238129 = 1; VAR__1238129 < M; VAR__1238129++ )
   {
      memset(SIGN, 0, sizeof( SIGN ));
      for ( int VAR__53647 = 0; VAR__53647 < N; VAR__53647++ )
      {
         for ( int VAR__21230 = 0; VAR__21230 < N; VAR__21230++ )
         {
            if (( DORM[VAR__53647][VAR__21230] == 1 ) && ( SIGN[VAR__53647][VAR__21230] == 0 ))
            {
               aff(VAR__53647, VAR__21230 + 1);
               aff(VAR__53647, VAR__21230 - 1);
               aff(VAR__53647 + 1, VAR__21230);
               aff(VAR__53647 - 1, VAR__21230);
            }
         }
      }
   }

   for ( int VAR__53647 = 0; VAR__53647 < N; VAR__53647++ )
   {
      for ( int VAR__21230 = 0; VAR__21230 < N; VAR__21230++ )
      {
         if ( DORM[VAR__53647][VAR__21230] == 1 )
         {
            VAR__SUM++;
         }
      }
   }

   cout << VAR__SUM;
   return 0;
}


void aff(int VAR__7685, int VAR__3918907)
{
   if (((( VAR__7685 >= 0 ) && ( VAR__7685 < N )) && ( VAR__3918907 >= 0 )) && ( VAR__3918907 < N ))
   {
      if (( DORM[VAR__7685][VAR__3918907] == ( -1 )) && ( SIGN[VAR__7685][VAR__3918907] == 0 ))
      {
         DORM[VAR__7685][VAR__3918907] = 1;
         SIGN[VAR__7685][VAR__3918907] = 1;
      }
   }
}
