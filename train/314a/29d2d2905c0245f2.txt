static int TIME_LIMIT = 1000;
int parseInput(char *input, int *record);

int main()
{
   char input[100000];
   int  enter[TIME_LIMIT];
   int  leave[TIME_LIMIT];

   for ( int VAR__53647 = 0; VAR__53647 < TIME_LIMIT; VAR__53647++ )
   {
      enter[VAR__53647] = ( leave[VAR__53647] = 0 );
   }

   cin.getline(input, 100000);
   int all = parseInput(input, enter);
   cin.getline(input, 100000);
   parseInput(input, leave);
   int VAR__MAX = 0;
   for ( int VAR__53647 = 0; VAR__53647 < TIME_LIMIT; VAR__53647++ )
   {
      if (( enter[VAR__53647] - leave[VAR__53647] ) > VAR__MAX )
      {
         VAR__MAX = enter[VAR__53647] - leave[VAR__53647];
      }
   }

   ((( cout << all ) << ' ' ) << VAR__MAX ) << endl;
   return 0;
}


int parseInput(char *input, int *record)
{
   int  idx = 0;
   char number[5];
   int  number_idx = 0;
   int  VAR__COUNT = 0;

   while ( idx < strlen(input))
   {
      if ( input[idx] != ',' )
      {
         number[number_idx++] = input[idx];
      }
      else
      {
         number[number_idx] = '\0';
         number_idx         = 0;
         int inum = atoi(number);
         for ( int VAR__53647 = inum; VAR__53647 < TIME_LIMIT; VAR__53647++ )
         {
            record[VAR__53647]++;
         }

         VAR__COUNT++;
      }

      idx++;
   }

   number[number_idx] = '\0';
   int inum = atoi(number);
   for ( int VAR__53647 = inum; VAR__53647 < TIME_LIMIT; VAR__53647++ )
   {
      record[VAR__53647]++;
   }

   VAR__COUNT++;
   return VAR__COUNT;
}
