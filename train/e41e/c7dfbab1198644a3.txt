int main()
{
   int  VAR__53647 = 0;
   int  VAR__21230;
   int  VAR__8444594;
   int  VAR__COUNT   = 0;
   int  product[100] = { 0 };
   int  remainder;
   int  numerator;
   int  left          = 0;
   char VAR__NUM[100] = { 0 };

   do
   {
      cin.get(VAR__NUM[VAR__53647]);
      VAR__53647++;
   } while ( VAR__NUM[VAR__53647 - 1] != '\n' );
   for ( VAR__21230 = VAR__53647 - 2; VAR__21230 >= 0; VAR__21230 -= 6 )
   {
      VAR__COUNT += VAR__NUM[VAR__21230] - 48;
   }

   for ( VAR__21230 = VAR__53647 - 3; VAR__21230 >= 0; VAR__21230 -= 6 )
   {
      VAR__COUNT += ( VAR__NUM[VAR__21230] - 48 ) * 10;
   }

   for ( VAR__21230 = VAR__53647 - 4; VAR__21230 >= 0; VAR__21230 -= 6 )
   {
      VAR__COUNT += ( VAR__NUM[VAR__21230] - 48 ) * 100;
   }

   for ( VAR__21230 = VAR__53647 - 5; VAR__21230 >= 0; VAR__21230 -= 6 )
   {
      VAR__COUNT -= VAR__NUM[VAR__21230] - 48;
   }

   for ( VAR__21230 = VAR__53647 - 6; VAR__21230 >= 0; VAR__21230 -= 6 )
   {
      VAR__COUNT -= ( VAR__NUM[VAR__21230] - 48 ) * 10;
   }

   for ( VAR__21230 = VAR__53647 - 7; VAR__21230 >= 0; VAR__21230 -= 6 )
   {
      VAR__COUNT -= ( VAR__NUM[VAR__21230] - 48 ) * 100;
   }

   remainder = VAR__COUNT % 13;
   numerator = (( VAR__NUM[0] - 48 ) * 10 ) + ( VAR__NUM[1] - 48 );
   for ( VAR__8444594 = 0; VAR__8444594 < ( VAR__53647 - 2 ); VAR__8444594++ )
   {
      product[VAR__8444594] = floor(numerator / 13);
      left      = numerator - ( 13 * product[VAR__8444594] );
      numerator = ( left * 10 ) + ( VAR__NUM[VAR__8444594 + 2] - 48 );
   }

   if (( product[0] == 0 ) && ( product[1] == 0 ))
   {
      ( cout << "0" ) << endl;
   }

   if ( product[0] != 0 )
   {
      cout << product[0];
      for ( VAR__8444594 = 1; VAR__8444594 < ( VAR__53647 - 2 ); VAR__8444594++ )
      {
         cout << product[VAR__8444594];
      }

      cout << endl;
   }

   if (( product[0] == 0 ) && ( product[1] != 0 ))
   {
      for ( VAR__8444594 = 1; VAR__8444594 < ( VAR__53647 - 2 ); VAR__8444594++ )
      {
         cout << product[VAR__8444594];
      }

      cout << endl;
   }

   ( cout << remainder ) << endl;
   return 0;
}
