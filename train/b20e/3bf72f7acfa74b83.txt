int VAR_1238123;
int VAR__819283[1001];
int VAR__19328[1001];
int mycompare(const void *ANOTHER_POINTER, const void *YET_ANOTHER_POINTER)
{
   int *a1;
   int *a2;

   a1 = (int *)ANOTHER_POINTER;
   a2 = (int *)YET_ANOTHER_POINTER;
   return ( *a2 ) - ( *a1 );
}


int main()
{
   int VAR__53647;
   int VAR__21230;
   int k1;
   int k2;
   int la;
   int lb;
   int ra;
   int rb;
   int total;

   while ( true )
   {
      cin >> VAR_1238123;

      if ( VAR_1238123 == 0 )
      {
         break;
      }

      for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         scanf("%d", &VAR__819283[VAR__53647]);
      }

      for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         scanf("%d", &VAR__19328[VAR__53647]);
      }

      qsort(VAR__819283, VAR_1238123, sizeof( int ), mycompare);
      qsort(VAR__19328, VAR_1238123, sizeof( int ), mycompare);
      total = 0;
      la    = 0;
      lb    = 0;
      ra    = VAR_1238123 - 1;
      rb    = VAR_1238123 - 1;

      while ( la <= ra )
      {
         if ( VAR__819283[la] > VAR__19328[lb] )
         {
            total = total + 200;
            la++;
            lb++;
         }
         else
         {
            if ( VAR__819283[la] < VAR__19328[lb] )
            {
               total = total - 200;
               lb++;
               ra--;
            }
            else
            {
               for ( k1 = ra, k2 = rb; la <= k1; k1--, k2-- )
               {
                  if ( VAR__819283[k1] > VAR__19328[k2] )
                  {
                     total = total + 200;
                     ra--;
                     rb--;
                  }
                  else
                  {
                     if ( VAR__819283[k1] < VAR__19328[lb] )
                     {
                        total = total - 200;
                     }

                     ra = k1;
                     rb = k2;
                     ra--;
                     lb++;
                     break;
                  }
               }
            }
         }
      }

      ( cout << total ) << endl;
   }

   return 0;
}
