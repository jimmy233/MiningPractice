int cmp(const void *elem1, const void *elem2)
{
   int *e1 = (int *)elem1;
   int *e2 = (int *)elem2;

   return ( *e2 ) - ( *e1 );
}


int main()
{
   int VAR_1238123;
   int data1[1005];
   int data2[1005];
   int VAR__53647;
   int i1;
   int i2;
   int j1;
   int j2;
   int result;

   while ( true )
   {
      cin >> VAR_1238123;

      if ( VAR_1238123 == 0 )
      {
         break;
      }

      for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         cin >> data1[VAR__53647];
      }

      for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         cin >> data2[VAR__53647];
      }

      qsort(data1, VAR_1238123, sizeof( int ), cmp);
      qsort(data2, VAR_1238123, sizeof( int ), cmp);
      i1     = 0;
      j1     = 0;
      i2     = VAR_1238123 - 1;
      j2     = VAR_1238123 - 1;
      result = 0;

      while ( i1 != ( i2 + 1 ))
      {
         while (( data1[i1] != data2[j1] ) && ( i1 != ( i2 + 1 )))
         {
            if ( data1[i1] < data2[j1] )
            {
               i2--;
               j1++;
               result -= 200;
            }
            else
            if ( data1[i1] > data2[j1] )
            {
               i1++;
               j1++;
               result += 200;
            }
            else
            {
               break;
            }
         }

         while (( data1[i2] != data2[j2] ) && ( i1 != ( i2 + 1 )))
         {
            if ( data1[i2] < data2[j2] )
            {
               j1++;
               i2--;
               result -= 200;
            }
            else
            if ( data1[i2] > data2[j2] )
            {
               i2--;
               j2--;
               result += 200;
            }
            else
            {
               break;
            }
         }

         if ((( data1[i1] == data2[j1] ) && ( data1[i2] == data2[j2] )) && ( i1 != ( i2 + 1 )))
         {
            if ( data1[i2] != data2[j1] )
            {
               result -= 200;
            }

            i2--;
            j1++;
         }
      }

      ( cout << result ) << endl;
   }

   return 0;
}
