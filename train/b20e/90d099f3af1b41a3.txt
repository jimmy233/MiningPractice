int cmp(const void *VAR__819283, const void *VAR__19328)
{
   return ( *((int *)VAR__819283 )) - ( *((int *)VAR__19328 ));
}


int VAR__819283[1000];
int VAR__19328[1000];
int queue[1001];
int VAR__HEAD;
int tail;
void enqueue(int elem)
{
   queue[VAR__HEAD++] = elem;

   if ( VAR__HEAD == MAX )
   {
      VAR__HEAD = 0;
   }
}


int top()
{
   return queue[tail];
}


int dequeue()
{
   int ret = queue[tail++];

   if ( tail == MAX )
   {
      tail = 0;
   }

   return ret;
}


int empty()
{
   return VAR__HEAD == tail;
}


int size()
{
   if ( VAR__HEAD < tail )
   {
      return ( VAR__HEAD + MAX ) - tail;
   }
   else
   {
      return VAR__HEAD - tail;
   }
}


int main()
{
   int VAR_1238123;
   int VAR__53647;
   int VAR__21230;
   int draw;
   int win;
   int ans;

   while (( scanf("%d", &VAR_1238123) != EOF ) && ( VAR_1238123 != 0 ))
   {
      VAR__HEAD = ( tail = 0 );
      for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         scanf("%d", VAR__819283 + VAR__53647);
      }

      for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         scanf("%d", VAR__19328 + VAR__53647);
      }

      qsort(VAR__819283, VAR_1238123, sizeof( int ), cmp);
      qsort(VAR__19328, VAR_1238123, sizeof( int ), cmp);
      win = ( draw = 0 );
      for ( VAR__53647 = VAR_1238123 - 1, VAR__21230 = VAR_1238123 - 1; VAR__21230 >= 0; VAR__21230-- )
      {
         if ( VAR__819283[VAR__53647] > VAR__19328[VAR__21230] )
         {
            VAR__53647--, win++;
         }
         else
         {
            if (( !empty()) && ( top() > VAR__19328[VAR__21230] ))
            {
               dequeue();
               win++;
            }
            else
            {
               if ( VAR__819283[VAR__53647] == VAR__19328[VAR__21230] )
               {
                  enqueue(VAR__819283[VAR__53647--]);
               }
            }
         }
      }

      draw = size();
      ans  = ((( 2 * win ) - VAR_1238123 ) + draw ) * 200;
      printf("%d\n", ans);
   }

   return 0;
}
