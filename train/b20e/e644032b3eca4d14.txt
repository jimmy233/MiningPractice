int compare(const void *element1, const void *element2)
{
   return ( *((int *)element2 )) - ( *((int *)element1 ));
}


int main()
{
   int VAR_1238123;
   int A[1000] = { 0 };
   int B[1000] = { 0 };
   int front1;
   int front2;
   int back1;
   int back2;
   int VAR__SUM = 0;

   while ( cin >> VAR_1238123 )
   {
      if ( VAR_1238123 == 0 )
      {
         return 0;
      }

      for ( int VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         cin >> A[VAR__53647];
      }

      for ( int VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
      {
         cin >> B[VAR__53647];
      }

      front1   = ( front2 = 0 );
      back1    = ( back2 = VAR_1238123 - 1 );
      VAR__SUM = 0;
      qsort(A, VAR_1238123, sizeof( int ), compare);
      qsort(B, VAR_1238123, sizeof( int ), compare);

      while ( front1 <= back1 )
      {
         if ( A[back1] > B[back2] )
         {
            VAR__SUM += 200;
            back1    -= 1;
            back2    -= 1;
         }
         else
         if ( A[back1] == B[back2] )
         {
            if ( A[front1] < B[front2] )
            {
               back1    -= 1;
               front2   += 1;
               VAR__SUM -= 200;
            }
            else
            if ( A[front1] == B[front2] )
            {
               back1  -= 1;
               front2 += 1;

               if ( B[front2 - 1] > A[back1 + 1] )
               {
                  VAR__SUM -= 200;
               }
               else
               {
                  VAR__SUM += 0;
               }
            }
            else
            if ( A[front1] > B[front2] )
            {
               front1   += 1;
               front2   += 1;
               VAR__SUM += 200;
            }
         }
         else
         if ( A[back1] < B[back2] )
         {
            VAR__SUM -= 200;
            back1    -= 1;
            front2   += 1;
         }
      }

      ( cout << VAR__SUM ) << endl;
      memset(A, 0, sizeof( A ));
      memset(B, 0, sizeof( B ));
   }
}
