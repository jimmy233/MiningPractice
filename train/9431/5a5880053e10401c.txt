struct stu
{
   char       info[1000];
   struct stu *VAR__NEXT;
};
struct stu *VAR__HEAD;
struct stu *create()
{
   char       ANOTHER_STRING[] = "end";
   struct stu *ANOTHER_POINTER;
   struct stu *YET_ANOTHER_POINTER;
   struct stu *VAR_233;

   ANOTHER_POINTER = (struct stu *)malloc(Len);
   gets(ANOTHER_POINTER->info);
   ANOTHER_POINTER->VAR__NEXT = NULL;

   if ( strcmp(ANOTHER_POINTER->info, ANOTHER_STRING) == 0 )
   {
      free(ANOTHER_POINTER);
      VAR__HEAD = NULL;
      return VAR__HEAD;
   }
   else
   {
      VAR__HEAD           = ANOTHER_POINTER;
      YET_ANOTHER_POINTER = ANOTHER_POINTER;
      do
      {
         ANOTHER_POINTER = (struct stu *)malloc(Len);
         gets(ANOTHER_POINTER->info);
         VAR_233 = VAR__HEAD;

         if ( strcmp(ANOTHER_POINTER->info, ANOTHER_STRING) == 0 )
         {
            free(ANOTHER_POINTER);
            break;
         }
         else
         {
            ANOTHER_POINTER->VAR__NEXT = YET_ANOTHER_POINTER;
            VAR__HEAD           = ANOTHER_POINTER;
            YET_ANOTHER_POINTER = ANOTHER_POINTER;
         }
      } while ( 1 );
      return VAR__HEAD;
   }
}


void print(struct stu *VAR__HEAD)
{
   struct stu *VAR_233;

   VAR_233 = VAR__HEAD;

   if ( VAR__HEAD != NULL )
   {
      do
      {
         puts(VAR_233->info);
         VAR_233 = VAR_233->VAR__NEXT;
      } while ( VAR_233 != NULL );
   }
}


void main()
{
   create();
   print(VAR__HEAD);
}
