void main()
{
   int reverse(int VAR__NUM);

   int a1;
   int a2;
   int a3;
   int a4;
   int a5;
   int a6;
   scanf("%d%d%d%d%d%d", &a1, &a2, &a3, &a4, &a5, &a6);
   printf("%d\n%d\n%d\n%d\n%d\n%d\n", reverse(a1), reverse(a2), reverse(a3), reverse(a4), reverse(a5), reverse(a6));
}


int reverse(int VAR__NUM)
{
   int mun;
   int ANOTHER_POINTER;
   int YET_ANOTHER_POINTER;
   int p3;
   int p4;
   int p5;

   if ( fabs(VAR__NUM) < 10 )
   {
      mun = VAR__NUM;
   }
   else
   if (( fabs(VAR__NUM) >= 10 ) && ( fabs(VAR__NUM) < 100 ))
   {
      ANOTHER_POINTER = VAR__NUM / 10, YET_ANOTHER_POINTER = VAR__NUM - ( ANOTHER_POINTER * 10 ), mun = ( YET_ANOTHER_POINTER * 10 ) + ANOTHER_POINTER;
   }
   else
   if (( fabs(VAR__NUM) >= 100 ) && ( fabs(VAR__NUM) < 1000 ))
   {
      ANOTHER_POINTER = VAR__NUM / 100, YET_ANOTHER_POINTER = ( VAR__NUM - ( ANOTHER_POINTER * 100 )) / 10, p3 = ( VAR__NUM - ( ANOTHER_POINTER * 100 )) - ( YET_ANOTHER_POINTER * 10 ), mun = (( p3 * 100 ) + ( YET_ANOTHER_POINTER * 10 )) + ANOTHER_POINTER;
   }
   else
   if (( fabs(VAR__NUM) >= 1000 ) && ( fabs(VAR__NUM) < 10000 ))
   {
      ANOTHER_POINTER = VAR__NUM / 1000, YET_ANOTHER_POINTER = ( VAR__NUM - ( ANOTHER_POINTER * 1000 )) / 100, p3 = (( VAR__NUM - ( ANOTHER_POINTER * 1000 )) - ( YET_ANOTHER_POINTER * 100 )) / 10, p4 = (( VAR__NUM - ( ANOTHER_POINTER * 1000 )) - ( YET_ANOTHER_POINTER * 100 )) - ( p3 * 10 ), mun = ((( p4 * 1000 ) + ( p3 * 100 )) + ( YET_ANOTHER_POINTER * 10 )) + ANOTHER_POINTER;
   }
   else
   if ( fabs(VAR__NUM) >= 10000 )
   {
      ANOTHER_POINTER = VAR__NUM / 10000, YET_ANOTHER_POINTER = ( VAR__NUM - ( ANOTHER_POINTER * 10000 )) / 1000, p3 = (( VAR__NUM - ( ANOTHER_POINTER * 10000 )) - ( YET_ANOTHER_POINTER * 1000 )) / 100, p4 = ((( VAR__NUM - ( ANOTHER_POINTER * 10000 )) - ( YET_ANOTHER_POINTER * 1000 )) - ( p3 * 100 )) / 10, p5 = ((( VAR__NUM - ( ANOTHER_POINTER * 10000 )) - ( YET_ANOTHER_POINTER * 1000 )) - ( p3 * 100 )) - ( p4 * 10 ), mun = (((( p5 * 10000 ) + ( p4 * 1000 )) + ( p3 * 100 )) + ( YET_ANOTHER_POINTER * 10 )) + ANOTHER_POINTER;
   }



   return mun;
}
