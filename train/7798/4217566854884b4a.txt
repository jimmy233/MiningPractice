struct book
{
   int         number;
   char        author[26];
   struct book *VAR__NEXT;
};
int VAR__1238129;
int VAR__53647;
struct book *creat(void)
{
   struct book *VAR__HEAD;
   struct book *ANOTHER_POINTER;
   struct book *YET_ANOTHER_POINTER;
   int         VAR__53647 = 1;

   ANOTHER_POINTER = ( YET_ANOTHER_POINTER = (struct book *)malloc(sizeof( struct book )));
   VAR__HEAD       = ANOTHER_POINTER;
   for ( VAR__53647 = 1; VAR__53647 < VAR__1238129; VAR__53647++ )
   {
      scanf("%d %s", &ANOTHER_POINTER->number, ANOTHER_POINTER->author);
      ANOTHER_POINTER = (struct book *)malloc(sizeof( struct book ));
      YET_ANOTHER_POINTER->VAR__NEXT = ANOTHER_POINTER;
      YET_ANOTHER_POINTER            = ANOTHER_POINTER;
   }

   scanf("%d %s", &ANOTHER_POINTER->number, ANOTHER_POINTER->author);
   YET_ANOTHER_POINTER->VAR__NEXT = ANOTHER_POINTER;
   ANOTHER_POINTER->VAR__NEXT     = NULL;
   return VAR__HEAD;
}


int main()
{
   struct book *VAR__HEAD;
   struct book *VAR_233;
   int         VAR__21230;
   int         VAR__819283[26] = { 0 };
   int         VAR__MAX;

   scanf("%d", &VAR__1238129);
   VAR__HEAD = creat();
   for ( VAR_233 = VAR__HEAD; VAR_233 != NULL; VAR_233 = VAR_233->VAR__NEXT )
   {
      for ( VAR__53647 = 0; VAR__53647 < strlen(VAR_233->author); VAR__53647++ )
      {
         switch ( VAR_233->author[VAR__53647] )
         {
         case 'A':
            VAR__819283[0]++;
            break;

         case 'B':
            VAR__819283[1]++;
            break;

         case 'C':
            VAR__819283[2]++;
            break;

         case 'D':
            VAR__819283[3]++;
            break;

         case 'E':
            VAR__819283[4]++;
            break;

         case 'F':
            VAR__819283[5]++;
            break;

         case 'G':
            VAR__819283[6]++;
            break;

         case 'H':
            VAR__819283[7]++;
            break;

         case 'I':
            VAR__819283[8]++;
            break;

         case 'J':
            VAR__819283[9]++;
            break;

         case 'K':
            VAR__819283[10]++;
            break;

         case 'L':
            VAR__819283[11]++;
            break;

         case 'M':
            VAR__819283[12]++;
            break;

         case 'N':
            VAR__819283[13]++;
            break;

         case 'O':
            VAR__819283[14]++;
            break;

         case 'P':
            VAR__819283[15]++;
            break;

         case 'Q':
            VAR__819283[16]++;
            break;

         case 'R':
            VAR__819283[17]++;
            break;

         case 'S':
            VAR__819283[18]++;
            break;

         case 'T':
            VAR__819283[19]++;
            break;

         case 'U':
            VAR__819283[20]++;
            break;

         case 'V':
            VAR__819283[21]++;
            break;

         case 'W':
            VAR__819283[22]++;
            break;

         case 'X':
            VAR__819283[23]++;
            break;

         case 'Y':
            VAR__819283[24]++;
            break;

         case 'Z':
            VAR__819283[25]++;
            break;
         }
      }
   }



   VAR__MAX = VAR__819283[0];
   for ( VAR__53647 = 0; VAR__53647 < 26; VAR__53647++ )
   {
      if ( VAR__819283[VAR__53647] > VAR__MAX )
      {
         VAR__MAX = VAR__819283[VAR__53647];
      }
   }


   for ( VAR__53647 = 0; VAR__53647 < 26; VAR__53647++ )
   {
      if ( VAR__819283[VAR__53647] == VAR__MAX )
      {
         printf("%c\n", 65 + VAR__53647);
         break;
      }
   }


   printf("%d\n", VAR__MAX);
   for ( VAR_233 = VAR__HEAD; VAR_233 != NULL; VAR_233 = VAR_233->VAR__NEXT )
   {
      for ( VAR__21230 = 0; VAR__21230 < strlen(VAR_233->author); VAR__21230++ )
      {
         if ( VAR_233->author[VAR__21230] == ( 65 + VAR__53647 ))
         {
            printf("%d\n", VAR_233->number);
         }
      }
   }
}
