struct record
{
   int id;
};
struct YyxNode
{
   struct record  m_rec;
   struct YyxNode *VAR__NEXT;
};
struct YyxLink
{
   int            VAR_1238123;
   struct YyxNode *VAR__HEAD;
   struct YyxNode *tail;
};
struct YyxLink *CreateNewLink()
{
   struct YyxLink *newLn;
   struct YyxNode *newNd;

   if ((( newLn = (struct YyxLink *)malloc(sizeof( struct YyxLink ))) == NULL ) || (( newNd = (struct YyxNode *)malloc(sizeof( struct YyxNode ))) == NULL ))
   {
      printf("Error: memory out! (1)");
      exit(-1);
   }

   newLn->VAR_1238123 = 0;
   newLn->VAR__HEAD   = newNd;
   newNd->VAR__NEXT   = NULL;
   newLn->tail        = newNd;
   return newLn;
}


struct YyxLink *AddNode(struct YyxLink *ln, const struct record *rec)
{
   struct YyxNode *newNd;

   if (( newNd = (struct YyxNode *)malloc(sizeof( struct YyxNode ))) == NULL )
   {
      printf("Error: memory out! (2)");
      exit(-1);
   }

   newNd->m_rec        = *rec;
   newNd->VAR__NEXT    = NULL;
   ln->tail->VAR__NEXT = newNd;
   ln->tail            = newNd;
   ln->VAR_1238123++;
   return ln;
}


struct YyxLink *ClearLink(struct YyxLink *ln)
{
   struct YyxNode *delNd;
   struct YyxNode *nextNd;

   delNd = ln->VAR__HEAD->VAR__NEXT;
   for ( ; delNd != NULL; delNd = nextNd )
   {
      nextNd = delNd->VAR__NEXT;
      free(delNd);
   }

   ln->VAR_1238123          = 0;
   ln->VAR__HEAD->VAR__NEXT = NULL;
   return ln;
}


void FreeLink(struct YyxLink *ln)
{
   ClearLink(ln);
   free(ln->VAR__HEAD);
   free(ln);
}


int main()
{
   struct YyxLink **total;
   int            VAR__1238129;
   struct record  rec;
   char           author[27];
   int            VAR__53647;
   char           *pch;
   struct YyxNode *nd;

   if (( total = (struct YyxLink **)malloc(26 * ( sizeof( struct YyxLink * )))) == NULL )
   {
      printf("Error: memory out! (3)\n");
      exit(-1);
   }

   for ( VAR__53647 = 0; VAR__53647 < 26; VAR__53647++ )
   {
      total[VAR__53647] = CreateNewLink();
   }

   scanf("%d", &VAR__1238129);
   for ( ; VAR__1238129 > 0; VAR__1238129-- )
   {
      scanf("%d %s", &rec.id, author);
      pch = author;
      for ( ; ( *pch ) != '\0'; pch++ )
      {
         AddNode(total[( *pch ) - 'A'], &rec);
      }
   }

   VAR__1238129 = 0;
   for ( VAR__53647 = 1; VAR__53647 < 26; VAR__53647++ )
   {
      if ( total[VAR__1238129]->VAR_1238123 < total[VAR__53647]->VAR_1238123 )
      {
         VAR__1238129 = VAR__53647;
      }
   }

   printf("%c\n%d\n", VAR__1238129 + 'A', total[VAR__1238129]->VAR_1238123);
   nd = total[VAR__1238129]->VAR__HEAD->VAR__NEXT;
   for ( ; nd != NULL; nd = nd->VAR__NEXT )
   {
      printf("%d\n", nd->m_rec);
   }

   return 0;
}
