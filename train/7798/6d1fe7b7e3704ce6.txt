struct book
{
   char        VAR__NUM[500];
   char        VAR_9494[50];
   struct book *VAR__NEXT;
};
void main()
{
   struct book *VAR__HEAD;
   struct book *ANOTHER_POINTER;
   struct book *YET_ANOTHER_POINTER;
   int         VAR__1238129;
   int         mi;
   int         VAR__53647;
   int         VAR__21230;
   int         VAR__8444594;
   int         VAR__MAX;
   int         found;
   int         aut[26] = { 0 };

   scanf("%d", &VAR__1238129);
   ANOTHER_POINTER = (struct book *)malloc(LEN);
   scanf("%s %s", ANOTHER_POINTER->VAR__NUM, ANOTHER_POINTER->VAR_9494);
   for ( VAR__53647 = 0; VAR__53647 < strlen(ANOTHER_POINTER->VAR_9494); VAR__53647++ )
   {
      aut[ANOTHER_POINTER->VAR_9494[VAR__53647] - 'A']++;
   }

   ANOTHER_POINTER->VAR__NEXT = NULL;
   VAR__HEAD = ( YET_ANOTHER_POINTER = ANOTHER_POINTER );
   for ( mi = 2; mi <= VAR__1238129; mi++ )
   {
      ANOTHER_POINTER = (struct book *)malloc(LEN);
      scanf("%s %s", ANOTHER_POINTER->VAR__NUM, ANOTHER_POINTER->VAR_9494);
      for ( VAR__53647 = 0; VAR__53647 < strlen(ANOTHER_POINTER->VAR_9494); VAR__53647++ )
      {
         aut[ANOTHER_POINTER->VAR_9494[VAR__53647] - 'A']++;
      }

      YET_ANOTHER_POINTER->VAR__NEXT = ANOTHER_POINTER;
      YET_ANOTHER_POINTER            = ANOTHER_POINTER;
   }

   YET_ANOTHER_POINTER->VAR__NEXT = NULL;
   VAR__MAX = 0;
   for ( VAR__53647 = 0; VAR__53647 < 26; VAR__53647++ )
   {
      if ( aut[VAR__53647] > VAR__MAX )
      {
         VAR__8444594 = VAR__53647;
         VAR__MAX     = aut[VAR__53647];
      }
   }


   printf("%c\n", VAR__8444594 + 65);
   printf("%d\n", aut[VAR__8444594]);
   ANOTHER_POINTER = VAR__HEAD;
   for ( VAR__53647 = 1; VAR__53647 <= VAR__1238129; VAR__53647++ )
   {
      found = 0;
      for ( VAR__21230 = 0; VAR__21230 < strlen(ANOTHER_POINTER->VAR_9494); VAR__21230++ )
      {
         if ( ANOTHER_POINTER->VAR_9494[VAR__21230] == ( VAR__8444594 + 65 ))
         {
            found = 1;
            break;
         }
      }


      if ( found == 1 )
      {
         printf("%s\n", ANOTHER_POINTER->VAR__NUM);
      }

      ANOTHER_POINTER = ANOTHER_POINTER->VAR__NEXT;
   }
}
