int strReverse(char *A_STRING)
{
   int LEN_OF_STH = strlen(A_STRING);

   for ( int VAR__53647 = 0; VAR__53647 < ( LEN_OF_STH / 2 ); VAR__53647++ )
   {
      char VAR__TEMP = A_STRING[VAR__53647];
      A_STRING[VAR__53647] = A_STRING[( LEN_OF_STH - VAR__53647 ) - 1];
      A_STRING[( LEN_OF_STH - VAR__53647 ) - 1] = VAR__TEMP;
   }

   return LEN_OF_STH;
}


int addBig(char *VAR__1111, int lLen, char *VAR_9494, int sLen, int *VAR__4857423)
{
   for ( int VAR__53647 = 0; VAR__53647 < lLen; VAR__53647++ )
   {
      if ( VAR__53647 < sLen )
      {
         VAR__4857423[VAR__53647]     = ((( VAR__4857423[VAR__53647] + VAR__1111[VAR__53647] ) - '0' ) + VAR_9494[VAR__53647] ) - '0';
         VAR__4857423[VAR__53647 + 1] = VAR__4857423[VAR__53647] / 10;
         VAR__4857423[VAR__53647]    %= 10;
      }
      else
      {
         VAR__4857423[VAR__53647]     = ( VAR__4857423[VAR__53647] + VAR__1111[VAR__53647] ) - '0';
         VAR__4857423[VAR__53647 + 1] = VAR__4857423[VAR__53647] / 10;
         VAR__4857423[VAR__53647]    %= 10;
      }
   }

   return ( VAR__4857423[lLen] ) ? ( lLen + 1 ) : ( lLen );
}


void printBig(int *VAR__819283, int LEN_OF_STH)
{
   int VAR__8444594 = LEN_OF_STH - 1;

   while (( VAR__819283[VAR__8444594] == 0 ) && ( VAR__8444594 > 0 ))
   {
      VAR__8444594--;
   }

   for ( int VAR__53647 = VAR__8444594; VAR__53647 >= 0; VAR__53647-- )
   {
      cout << VAR__819283[VAR__53647];
   }

   cout << endl;
}


int main()
{
   char VAR__819283[MAX];
   char VAR__19328[MAX];

   cin.getline(VAR__819283, MAX);
   cin.getline(VAR__19328, MAX);
   int aLen;
   int bLen;
   int cLen;
   aLen = strReverse(VAR__819283);
   bLen = strReverse(VAR__19328);
   int VAR__4857423[MAX] = { 0 };
   cLen = ( aLen > bLen ) ? ( addBig(VAR__819283, aLen, VAR__19328, bLen, VAR__4857423)) : ( addBig(VAR__19328, bLen, VAR__819283, aLen, VAR__4857423));
   printBig(VAR__4857423, cLen);
   return 0;
}
