const int base  = 250;
const int start = 5;
int       ans[300];
int main()
{
   void trans(char VAR_9494[], int VAR__NUM[]);
   void plus(int VAR__819283[], int VAR__19328[]);
   int minus(int VAR__819283[], int VAR__19328[]);
   void print(int VAR__NUM[]);
   int judge(int VAR__819283[], int VAR__19328[]);

   int  VAR__819283[300];
   int  VAR__19328[300];
   char sa[300];
   char sb[300];
   int  VAR_1238123;
   scanf("%d", &VAR_1238123);
   for ( int VAR__53647 = 1; VAR__53647 <= VAR_1238123; VAR__53647++ )
   {
      getchar();
      gets(sa);
      gets(sb);
      memset(VAR__819283, 0, 300 * ( sizeof( int )));
      memset(VAR__19328, 0, 300 * ( sizeof( int )));
      memset(ans, 0, 300 * ( sizeof( int )));
      trans(sa, VAR__819283);
      trans(sb, VAR__19328);
      VAR__19328[0] = 0 - VAR__19328[0];

      if (( VAR__819283[0] * VAR__19328[0] ) > 0 )
      {
         plus(VAR__819283, VAR__19328);
         ans[0] = VAR__819283[0];
      }
      else
      {
         int VAR_FLAG = judge(VAR__819283, VAR__19328);

         if ( VAR_FLAG == 0 )
         {
            printf("0\n");
            continue;
         }

         if ( VAR_FLAG > 0 )
         {
            minus(VAR__819283, VAR__19328);
            ans[0] = VAR__819283[0];
         }
         else
         {
            minus(VAR__19328, VAR__819283);
            ans[0] = VAR__19328[0];
         }
      }

      print(ans);
   }

   getchar();
   getchar();
   getchar();
   getchar();
}


void trans(char VAR_9494[], int VAR__NUM[])
{
   int LEN_OF_STH = strlen(VAR_9494);
   int VAR__19328 = 0;

   VAR__NUM[0] = 1;

   if ( VAR_9494[0] == '-' )
   {
      LEN_OF_STH--;
      VAR__19328++;
      VAR__NUM[0] = -1;
   }

   for ( int VAR__temp = 0; VAR__temp < LEN_OF_STH; VAR__temp++ )
   {
      VAR__NUM[(( base - LEN_OF_STH ) + VAR__temp ) + 1] = VAR_9494[VAR__temp + VAR__19328] - '0';
   }

   VAR__NUM[1] = ( base - LEN_OF_STH ) + 1;
}


int judge(int VAR__819283[], int VAR__19328[])
{
   if ( VAR__819283[1] < VAR__19328[1] )
   {
      return 1;
   }
   else
   if ( VAR__819283[1] > VAR__19328[1] )
   {
      return -1;
   }
   else
   {
      int VAR__temp;
      int VAR_233 = 0;
      int floor   = ( VAR__819283[1] < VAR__19328[1] ) ? ( VAR__819283[1] ) : ( VAR__19328[1] );
      for ( VAR__temp = floor; ( VAR__temp <= base ) && ( VAR_233 == 0 ); VAR__temp++ )
      {
         VAR_233 = VAR__819283[VAR__temp] - VAR__19328[VAR__temp];
      }

      if ( VAR_233 == 0 )
      {
         return 0;
      }
      else
      {
         return ( VAR_233 > 0 ) ? ( 1 ) : ( -1 );
      }
   }
}


void check(int VAR__NUM[])
{
   int VAR_233;

   for ( VAR_233 = start; ( VAR__NUM[VAR_233] == 0 ) && ( VAR_233 <= base ); VAR_233++ )
   {
   }

   VAR__NUM[1] = VAR_233;
}


void plus(int VAR__819283[], int VAR__19328[])
{
   int floor = ( VAR__819283[1] < VAR__19328[1] ) ? ( VAR__819283[1] ) : ( VAR__19328[1] );

   for ( int VAR__temp = base; VAR__temp >= floor; VAR__temp-- )
   {
      int VAR__8444594 = ( ans[VAR__temp] + VAR__819283[VAR__temp] ) + VAR__19328[VAR__temp];
      ans[VAR__temp]      = VAR__8444594 % 10;
      ans[VAR__temp - 1] += VAR__8444594 / 10;
   }

   if ( ans[floor - 1] != 0 )
   {
      ans[1] = floor - 1;
   }
   else
   {
      ans[1] = floor;
   }
}


void minus(int VAR__819283[], int VAR__19328[])
{
   int floor = ( VAR__819283[1] < VAR__19328[1] ) ? ( VAR__819283[1] ) : ( VAR__19328[1] );

   for ( int VAR__temp = base; VAR__temp >= floor; VAR__temp-- )
   {
      int VAR__8444594 = ( ans[VAR__temp] + VAR__819283[VAR__temp] ) - VAR__19328[VAR__temp];

      if ( VAR__8444594 < 0 )
      {
         ans[VAR__temp - 1] -= 1;
         VAR__8444594       += 10;
      }

      ans[VAR__temp]      = VAR__8444594 % 10;
      ans[VAR__temp - 1] += VAR__8444594 / 10;
   }

   check(ans);
}


void print(int VAR__NUM[])
{
   if ( VAR__NUM[0] < 0 )
   {
      printf("-");
   }

   for ( int VAR__temp = VAR__NUM[1]; VAR__temp <= base; VAR__temp++ )
   {
      printf("%d", VAR__NUM[VAR__temp]);
   }

   printf("\n");
}
