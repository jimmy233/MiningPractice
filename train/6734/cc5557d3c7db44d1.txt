int findking(int VAR__1238129, int VAR_1238123);

int main()
{
   int VAR__1238129[300];
   int VAR_1238123[300];
   int king[300];
   int VAR__53647;

   for ( VAR__53647 = 0; VAR__53647 < 300; VAR__53647++ )
   {
      scanf("%d%d", &VAR_1238123[VAR__53647], &VAR__1238129[VAR__53647]);

      if (( VAR__1238129[VAR__53647] == 0 ) && ( VAR_1238123[VAR__53647] == 0 ))
      {
         break;
      }
   }

   for ( VAR__53647 = 0; VAR__53647 < 300; VAR__53647++ )
   {
      if (( VAR__1238129[VAR__53647] == 0 ) && ( VAR_1238123[VAR__53647] == 0 ))
      {
         break;
      }

      king[VAR__53647] = findking(VAR__1238129[VAR__53647], VAR_1238123[VAR__53647]);
   }

   for ( VAR__53647 = 0; VAR__53647 < 300; VAR__53647++ )
   {
      if (( VAR__1238129[VAR__53647] == 0 ) && ( VAR_1238123[VAR__53647] == 0 ))
      {
         break;
      }

      printf("%d\n", king[VAR__53647]);
   }

   return 0;
}


int findking(int VAR__1238129, int VAR_1238123)
{
   int VAR__53647 = 0;
   int VAR__NUM   = 0;
   int zero       = 0;
   int king;
   int VAR_SIZE[300] = { 0 };

   while ( 1 )
   {
      zero = 0;
      for ( int VAR__21230 = 0; VAR__21230 < VAR_1238123; VAR__21230++ )
      {
         if ( VAR_SIZE[VAR__21230] == 0 )
         {
            zero++;
         }
      }

      if ( zero == 1 )
      {
         break;
      }

      if ( VAR_SIZE[VAR__53647] == 1 )
      {
         if ( VAR__53647 == ( VAR_1238123 - 1 ))
         {
            VAR__53647 = 0;
         }
         else
         {
            VAR__53647++;
         }

         continue;
      }

      VAR__NUM++;

      if ( VAR__NUM == VAR__1238129 )
      {
         VAR_SIZE[VAR__53647] = 1;
         VAR__NUM             = 0;
      }

      if ( VAR__53647 == ( VAR_1238123 - 1 ))
      {
         VAR__53647 = 0;
      }
      else
      {
         VAR__53647++;
      }
   }

   for ( VAR__53647 = 0; VAR__53647 < VAR_1238123; VAR__53647++ )
   {
      if ( VAR_SIZE[VAR__53647] == 0 )
      {
         king = VAR__53647 + 1;
      }
   }

   return king;
}
