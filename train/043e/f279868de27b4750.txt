struct Vocabulary
{
   char              character[Vocabularysize];
   struct Vocabulary *VAR__NEXT;
};
int  VAR_1238123 = 0;
char A_STRING[Sentencelength];
struct Vocabulary *create()
{
   int               VAR__53647;
   struct Vocabulary *VAR__HEAD;
   struct Vocabulary *ANOTHER_POINTER;
   struct Vocabulary *YET_ANOTHER_POINTER;

   VAR_1238123 = 0;
   int VAR__8444594 = 0;
   int VAR__1111    = 0;
   ANOTHER_POINTER = ( YET_ANOTHER_POINTER = (struct Vocabulary *)malloc(sizeof( struct Vocabulary )));
   for ( VAR__1111 = VAR__8444594; A_STRING[VAR__1111] != ' '; VAR__1111++ )
   {
   }

   for ( VAR__53647 = VAR__8444594; VAR__53647 < VAR__1111; VAR__53647++ )
   {
      ANOTHER_POINTER->character[VAR__53647] = A_STRING[VAR__53647];
   }

   ANOTHER_POINTER->character[VAR__53647] = '\0';
   VAR__8444594 = VAR__1111 + 1;
   VAR__53647   = 0;
   VAR__HEAD    = NULL;

   while ( A_STRING[VAR__53647] != '\0' )
   {
      VAR_1238123 = VAR_1238123 + 1;

      if ( VAR_1238123 == 1 )
      {
         VAR__HEAD = ANOTHER_POINTER;
      }
      else
      {
         YET_ANOTHER_POINTER->VAR__NEXT = ANOTHER_POINTER;
      }

      YET_ANOTHER_POINTER = ANOTHER_POINTER;
      ANOTHER_POINTER     = (struct Vocabulary *)malloc(sizeof( struct Vocabulary ));

      if ( A_STRING[VAR__1111] != '\0' )
      {
         for ( VAR__1111 = VAR__8444594; ( A_STRING[VAR__1111] != ' ' ) && ( VAR__1111 <= ( strlen(A_STRING) - 1 )); VAR__1111++ )
         {
         }

         int VAR__1238129;
         for ( VAR__53647 = VAR__8444594, VAR__1238129 = 0; VAR__53647 < VAR__1111; VAR__53647++, VAR__1238129++ )
         {
            ANOTHER_POINTER->character[VAR__1238129] = A_STRING[VAR__53647];
         }

         ANOTHER_POINTER->character[VAR__1238129] = '\0';
         VAR__8444594 = VAR__1111 + 1;
      }
      else
      {
         VAR__53647 = VAR__1111;
      }
   }

   YET_ANOTHER_POINTER->VAR__NEXT = ANOTHER_POINTER;
   YET_ANOTHER_POINTER            = ANOTHER_POINTER;
   YET_ANOTHER_POINTER->VAR__NEXT = NULL;
   return VAR__HEAD;
}


void print(struct Vocabulary *VAR__HEAD)
{
   struct Vocabulary *VAR_233;

   VAR_233 = VAR__HEAD;
   for ( VAR_233 = VAR__HEAD; VAR_233->VAR__NEXT != NULL; VAR_233 = VAR_233->VAR__NEXT )
   {
      printf("%s ", VAR_233->character);
   }

   printf("%s\n", VAR_233->character);
}


int main()
{
   struct Vocabulary *VAR__HEAD;

   gets(A_STRING);
   char stra[Sentencelength];
   char strb[Sentencelength];
   gets(stra);
   gets(strb);
   VAR__HEAD = create();
   struct Vocabulary *VAR_233 = VAR__HEAD;
   for ( VAR_233 = VAR__HEAD; VAR_233 != NULL; VAR_233 = VAR_233->VAR__NEXT )
   {
      if ( strcmp(VAR_233->character, stra) == 0 )
      {
         strcpy(VAR_233->character, strb);
      }
   }

   print(VAR__HEAD);
   return 0;
}
